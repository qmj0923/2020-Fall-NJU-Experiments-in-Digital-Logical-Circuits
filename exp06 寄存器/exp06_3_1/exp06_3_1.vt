// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "09/27/2020 19:49:14"
                                                                                
// Verilog Test Bench template for design : exp06_3_1
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 10 ps
module exp06_3_1_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg [3:0] KEY;
reg [8:0] SW;
// wires                                               
wire [7:0]  LEDR;

// assign statements (if any)                          
exp06_3_1 i1 (
// port map - connection between master ports and signals/registers   
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW)
);
initial                                                
begin                                                  

	SW[8:0] = 9'b0;
	KEY[3] = 0;
	KEY[2:0] = 3'b101; #2;
	#300;
	$stop;

end

always
begin                                                  

	#0.2 KEY[3] = 1; #5;
	KEY[3] = 0; #4.8;

end    

always
begin

	#1 SW[8] = 1; #4;
	SW[8] = 0; #2;
	
end
                                                
endmodule


