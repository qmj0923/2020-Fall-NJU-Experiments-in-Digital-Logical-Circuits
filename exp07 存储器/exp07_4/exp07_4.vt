// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/11/2020 22:21:55"
                                                                                
// Verilog Test Bench template for design : exp07_4
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 10 ps
module exp07_4_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg CLOCK_50;
reg [1:0] KEY;
reg [9:0] SW;
// wires                                               
wire [6:0]  HEX0;
wire [6:0]  HEX1;
wire [6:0]  HEX4;
wire [6:0]  HEX5;
wire [1:0]  LEDR;

// assign statements (if any)                          
exp07_4 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.KEY(KEY),
	.LEDR(LEDR),
	.SW(SW)
);

initial begin
	KEY[1] = 1;
	KEY[0] = 0; // write
	SW[9:8] = 4'h0;
	SW[7:4] = 4'h3;
	SW[3:0] = 4'h1;
	#5;
	KEY[0] = 1; // read
	#5;
	KEY[0] = 0; // write
	SW[9:8] = 4'h3;
	SW[7:4] = 4'h7;
	SW[3:0] = 4'h7;
	#5;
	KEY[0] = 1; // read
	#5;
	SW[3:0] = 4'h3;
	#5;
	
	KEY[1] = 0;
	KEY[0] = 0; // write
	SW[9:8] = 4'h0;
	SW[7:4] = 4'h3;
	SW[3:0] = 4'h1;
	#5;
	KEY[0] = 1; // read
	#5;
	KEY[0] = 0; // write
	SW[9:8] = 4'h3;
	SW[7:4] = 4'h7;
	SW[3:0] = 4'h7;
	#5;
	KEY[0] = 1; // read
	#5;
	SW[3:0] = 4'h3;
	#5;
	$stop;
end


always
begin
	#0.02 CLOCK_50 = 1; #0.5;
	CLOCK_50 = 0; #0.48;
end
   
endmodule

