// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "10/18/2020 15:12:49"
                                                                                
// Verilog Test Bench template for design : exp08_4
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ps
module exp08_4_vlg_tst();
// constants                                           
// general purpose registers
// reg eachvec;
// test vector input registers
reg CLOCK_50;
reg [0:0] KEY;
// reg treg_PS2_CLK;
// reg treg_PS2_DAT;
// wires                                               
wire [6:0]  HEX0;
wire [6:0]  HEX1;
wire [6:0]  HEX2;
wire [6:0]  HEX3;
wire [6:0]  HEX4;
wire [6:0]  HEX5;
wire [1:0]  LEDR;
wire PS2_CLK;
wire PS2_DAT;

parameter [31:0] clock_period = 2;

   // for debug
   // wire [1:0] kbd_type;
   // wire [7:0] eff_data, ascii_vec, keystrokes;

 ps2_keyboard_model model(
   .ps2_clk(PS2_CLK),
   .ps2_data(PS2_DAT)
   );
 
// assign statements (if any)                          
// assign PS2_CLK = treg_PS2_CLK;
// assign PS2_DAT = treg_PS2_DAT;
exp08_4 i1 (
// port map - connection between master ports and signals/registers   
	.CLOCK_50(CLOCK_50),
	.HEX0(HEX0),
	.HEX1(HEX1),
	.HEX2(HEX2),
	.HEX3(HEX3),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.KEY(KEY),
	.LEDR(LEDR),
	.PS2_CLK(PS2_CLK),
	.PS2_DAT(PS2_DAT)
   // .kbd_type(kbd_type), .eff_data(eff_data), .ascii_vec(ascii_vec), .keystrokes(keystrokes)
);

initial begin /* clock driver */
   CLOCK_50 = 0;
   forever
   #(clock_period/2) CLOCK_50 = ~CLOCK_50;
end

initial begin
   KEY = 1'b0; #20;
   KEY = 1'b1; #20;
   model.kbd_sendcode(8'h1C); // press 'A'
   #20; // #20 nextdata_n =1'b0; #20 nextdata_n =1'b1;//read data
   model.kbd_sendcode(8'hF0); // break code
   #20; // #20 nextdata_n =1'b0; #20 nextdata_n =1'b1; //read data
   model.kbd_sendcode(8'h1C); // release 'A'
   #20; // #20 nextdata_n =1'b0; #20 nextdata_n =1'b1; //read data
   model.kbd_sendcode(8'h1B); // press 'S'
   #20 model.kbd_sendcode(8'h1B); // keep pressing 'S'
   #20 model.kbd_sendcode(8'h1B); // keep pressing 'S'
   model.kbd_sendcode(8'hF0); // break code
   model.kbd_sendcode(8'h1B); // release 'S'
   #20;
   $stop;
end
 
endmodule

