
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp09_3_1(

	//////////// CLOCK //////////
	//input 		          		CLOCK2_50,
	//input 		          		CLOCK3_50,
	//input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// VGA //////////
	output	reg	          		VGA_BLANK_N,
	output	reg	     [7:0]		VGA_B,
	output	reg	          		VGA_CLK,
	output	reg	     [7:0]		VGA_G,
	output	reg	          		VGA_HS,
	output	reg	     [7:0]		VGA_R,
	output	reg	          		VGA_SYNC_N,
	output	reg	          		VGA_VS
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire tmp1_clk, tmp1_hs, tmp1_vs, tmp1_blank_n;
wire [3:0] tmp1_r, tmp1_g, tmp1_b;
wire tmp2_clk, tmp2_hs, tmp2_vs, tmp2_blank_n;
wire [3:0] tmp2_r, tmp2_g, tmp2_b;


//=======================================================
//  Structural coding
//=======================================================

stripes i1(
   .clk(CLOCK_50),
   .reset(~KEY[0]),
   .vga_clk(tmp1_clk),
   .vga_hs(tmp1_hs), // 行同步信号
   .vga_vs(tmp1_vs), // 列同步信号
   .valid(tmp1_blank_n),
   .vga_r(tmp1_r),
   .vga_g(tmp1_g),
   .vga_b(tmp1_b)
   );

mypic i2(
   .clk(CLOCK_50),
   .reset(~KEY[0]),
   .vga_clk(tmp2_clk),
   .vga_hs(tmp2_hs), // 行同步信号
   .vga_vs(tmp2_vs), // 列同步信号
   .valid(tmp2_blank_n),
   .vga_r(tmp2_r),
   .vga_g(tmp2_g),
   .vga_b(tmp2_b)
   );
   
initial begin
   VGA_SYNC_N = 0;
end

always @ (posedge CLOCK_50) begin
   if (KEY[1] == 1) begin
      VGA_CLK <= tmp1_clk;
      VGA_HS <= tmp1_hs;
      VGA_VS <= tmp1_vs;
      VGA_BLANK_N <= tmp1_blank_n;
      VGA_R <= {tmp1_r, 4'b0};
      VGA_G <= {tmp1_g, 4'b0};
      VGA_B <= {tmp1_b, 4'b0};
   end else begin
      VGA_CLK <= tmp2_clk;
      VGA_HS <= tmp2_hs;
      VGA_VS <= tmp2_vs;
      VGA_BLANK_N <= tmp2_blank_n;
      VGA_R <= {tmp2_r, 4'b0};
      VGA_G <= {tmp2_g, 4'b0};
      VGA_B <= {tmp2_b, 4'b0};
   end
end

endmodule
