
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module exp11_3(

	//////////// CLOCK //////////
	//input 		          		CLOCK2_50,
	//input 		          		CLOCK3_50,
	//input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [0:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	//inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT
	//inout 		          		PS2_DAT2
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire [9:0] h_addr, v_addr;
wire [11:0] vga_data;

wire nonchar_en;
wire [3:0] nonchar_key;
wire [7:0] char_ascii;

//=======================================================
//  Structural coding
//=======================================================

assign VGA_SYNC_N = 0;
assign VGA_R[3:0] = 4'b0;
assign VGA_G[3:0] = 4'b0;
assign VGA_B[3:0] = 4'b0;

assign LEDR[9] = nonchar_en;
assign LEDR[7:5] = nonchar_key;
   
clkgen #(.clk_freq(25000000)) my_vgaclk(
   .clkin(CLOCK_50),
   .rst(~KEY[0]),
   .clken(1'b1),
   .clkout(VGA_CLK)
);

vga_ctrl v1(
   .pclk(VGA_CLK),
   .reset(~KEY[0]),
   .vga_data(vga_data),
   .h_addr(h_addr), 
   .v_addr(v_addr),
   .hsync(VGA_HS),
   .vsync(VGA_VS),
   .valid(VGA_BLANK_N), 
   .vga_r(VGA_R[7:4]),
   .vga_g(VGA_G[7:4]),
   .vga_b(VGA_B[7:4])
);

Generate_VGAdata i1(
   .clk(CLOCK_50), 
   .clrn(KEY[0]), 
   .nonchar_en(nonchar_en), 
   .nonchar_key(nonchar_key), 
   .char_ascii(char_ascii),
   .h_addr(h_addr), 
   .v_addr(v_addr), 
   .vga_data(vga_data),
   .test1_h(HEX3), .test1_l(HEX2),
   .test2_h(HEX5), .test2_l(HEX4)
);

out_kbd o1(
   .clk(CLOCK_50), 
   .clrn(KEY[0]), 
   .ps2_clk(PS2_CLK),
   .ps2_data(PS2_DAT),
   .nonchar_en(nonchar_en),
   .nonchar_key(nonchar_key),
   .stat(LEDR[3:0]),
   .ascii_vec(char_ascii),
   .ascii_h(HEX1), .ascii_l(HEX0),
   //.scancode_h(HEX1), .scancode_l(HEX0)
);
               
endmodule
