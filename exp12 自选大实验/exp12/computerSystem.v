`include "macro.v"
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module computerSystem(

	//////////// CLOCK //////////
//	input 		          		CLOCK2_50,
//	input 		          		CLOCK3_50,
//	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// Seg7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
//	output		     [6:0]		HEX2,
//	output		     [6:0]		HEX3,
//	output		     [6:0]		HEX4,
//	output		     [6:0]		HEX5,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// PS2 //////////
	inout 		          		PS2_CLK,
	//inout 		          		PS2_CLK2,
	inout 		          		PS2_DAT
	//inout 		          		PS2_DAT2
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

/*======normal=====*/
wire clk, clrn;
assign clk=CLOCK_50;
assign clrn=KEY[0];
/*=================*/

/*=======cpu=======*/
reg  cpu_en;
wire [`INST_RAM_WIDTH-1:0] curr_PC;
reg mem_we,mem_re;
wire inst_re, cpu_mem_re, cpu_mem_we,key_mem_we;
 
wire cpu_finished, inst_finished; 
wire mem_r_finished, mem_w_finished; 
reg [`MEM_RAM_WIDTH-1:0] mem_addr;
wire [`MEM_RAM_WIDTH-1:0] cpu_mem_addr,key_mem_addr;

wire [31:0] inst_data, cpu_rt_data;
wire [31:0] exec_res,mem_r_data;
reg [31:0]mem_w_data;
wire [`INST_RAM_WIDTH-1:0] pc_end;
/*=======cpu begin========*/
reg [2:0] init, cnt;
parameter [2:0] set_time = 5;

initial begin
   init = 0;
   cnt = 0;
	mem_addr=0;
	cpu_en=0;
end

always @ (posedge clk) begin
   if (init < set_time) begin
      init <= init+1;
   end
end


//reg [2:0]cnt_init;
//parameter set_time = 3;
//reg cpu_init;

/*=====keyboard====*/
wire blink_en,one_char_flag,cmd_flag,enter_flag;
wire [7:0]argu,ascii;
wire [1:0]func_char;
wire [`PROG_TYPE_WIDTH-1:0]prog_type;
wire [`MEM_RAM_WIDTH-1:0] cursor_x, cursor_y;
/*=================*/

/*=======vga=======*/
wire [7:0] ram_ascii;
wire [9:0] h_addr, v_addr;
wire [11:0]vga_data;
wire [`MEM_RAM_WIDTH-1:0]scan_x, scan_y,scan_addr;
assign VGA_R[3:0] = 4'b0;
assign VGA_G[3:0] = 4'b0;
assign VGA_B[3:0] = 4'b0;
assign scan_addr=scan_y*20+scan_x;
assign key_mem_addr=cursor_y*20+cursor_x;

/*=================*/


/*=======cmd=======*/
wire [9:0]led_state;
assign LEDR=led_state;
//assign LEDR[9]=enter_flag;
//assign LEDR[8:7]=prog_type;
/*=================*/

//initial begin
//cnt_init=0;
//cpu_init=0;
//mem_addr=0;
//cpu_en=0;
//end

//====keyboard and vga========
keyboard key(.clk(clk),.clrn(clrn),.ps2_clk(PS2_CLK), .ps2_data(PS2_DAT),.enter_en(1'b1),
				// .seg0(HEX0), .seg1(HEX1), .seg2(HEX2), .seg3(HEX3), .seg4(HEX4), .seg5(HEX5),
				 .argu(argu),.blink_en(blink_en),.ascii(ascii),.func_char(func_char),.prog_type(prog_type),
				 .cursor_x(cursor_x), .cursor_y(cursor_y),. we(key_mem_we),.one_char_flag(one_char_flag),
				 .write_finished(mem_w_finished),.cmd_flag(cmd_flag),.enter_flag(enter_flag));
    

clkgen #(25000000) my_clk(CLOCK_50, 1'b0, 1'b1, VGA_CLK);			

vga_char ch(.clk(clk),.clrn(clrn), .blink_en(blink_en),.h_addr(h_addr), .v_addr(v_addr),
				.ram_ascii(ram_ascii), .cursor_x(cursor_x), .cursor_y(cursor_y),
            .vga_data(vga_data),.scan_x(scan_x), .scan_y(scan_y));

vga_ctrl vga_config(VGA_CLK,~KEY[0],vga_data,h_addr, v_addr,VGA_HS,VGA_VS,VGA_BLANK_N,VGA_R[7:4],VGA_G[7:4],VGA_B[7:4]);

//===========cpu & mem=================
inst_ram inst1(.clk(clk), .clrn(clrn), 
   .re(inst_re), .we(0),
   .read_addr(curr_PC), .read_data(inst_data), 
   .read_finished(inst_finished),
	.prog_type(prog_type));
   
	
 mem_ram mem1(.clk(clk), .clrn(clrn), 
   .re(mem_re), .we(mem_we),
   .read_addr(mem_addr), .read_data(mem_r_data),
   .write_addr(mem_addr), .write_data(mem_w_data),
   .read_finished(mem_r_finished), 
   .write_finished(mem_w_finished),.func_char(func_char),
   .scan_addr(scan_addr),.scan_data(ram_ascii),.blink_en(blink_en),
	.one_char_flag(one_char_flag),.prog_type(prog_type),.cmd_flag(cmd_flag),
	.led_state(led_state),.argu(argu),.seg0(HEX0), .seg1(HEX1),.pc_end(pc_end),.cpu_en(cpu_en)
	);

cpu cpu1(.clk(clk), .clrn(clrn), .en(cpu_en), 
   .curr_PC(curr_PC), .PC_end(pc_end), 
   .inst_re(inst_re), .mem_re(cpu_mem_re), .mem_we(cpu_mem_we), 
   .cpu_finished(cpu_finished), .inst_finished(inst_finished), 
   .mem_r_finished(mem_r_finished), .mem_w_finished(mem_w_finished), 
   .inst_data(inst_data), .rt_data(cpu_rt_data), .exec_res(exec_res), 
   .mem_addr(cpu_mem_addr), .mem_data(mem_r_data)
);
//=======================================================
//  Structural coding
//=======================================================

always @ (posedge clk) begin
   if (init == set_time) begin
      if (enter_flag==1) begin
         cpu_en <= 1;
         cnt <= 0;
      end else if (cnt == set_time) begin
         if (cpu_finished==1) cpu_en <= 0;
      end else begin
         cnt <= cnt + 1;
      end
   end
end

always @ (*) begin
	if(cpu_en==1)begin
		mem_re=cpu_mem_re;
		mem_we=cpu_mem_we;
		mem_addr=cpu_mem_addr;
		mem_w_data=cpu_rt_data;
	end
	else begin
		mem_we=key_mem_we;
		mem_addr=key_mem_addr;
		mem_w_data=ascii;
	end
end

//count ttt(argu,HEX2,HEX3);
//count tt(scan_x,HEX4,HEX5);
endmodule
